tcga_pancancer$omic_blocks$GE[,2]
#Clearing up working space, and history
rm(list=ls())
cat("\014")
write("", file=".blank")
unlink(".blank")
#Loading package.
devtools::document("~/MOSS")
help(moss)
#Loading package.
devtools::load_all("~/MOSS")
#Loading package.
devtools::check("~/MOSS")
#Loading package.
devtools::check("~/MOSS")
#Loading package.
devtools::check("~/MOSS")
data("sim_blocks")
#Check dimensions and objects class.
lapply(sim_blocks,dim)
lapply(sim_blocks,function(x) class(x[,1]))
#Loading package.
devtools::check("~/MOSS")
tempfile()
ggsave(h,filename = "~/lalala.jpeg",device = "jpeg",width = 6,height = 5)
#Creating heatmap.
h <- draw(Heatmap(do.call("cbind", sim_blocks[-4]), #Excluding the categorical response.
left_annotation = Sub.ann,
top_annotation = Feat.ann,
row_title = "Subjects",
column_title = "Features",
show_heatmap_legend = F,
cluster_columns = T,
cluster_rows = T),
annotation_legend_side = "bottom")
data("sim_blocks")
#Visualizing the simulated omic blocks with a heatmap.
require(ComplexHeatmap)
#Highlighting groups of subjects and features.
Sub.ann <- rowAnnotation(
`Sub labels`=lab.sub,
col=list(`Sub labels`=c("Group 1" = "#44015480" ,"Group 2"="#F1605D80" ,"Background"="#21908C80")),
show_annotation_name=F)
Feat.ann <- HeatmapAnnotation(
`Feat labels`=lab.feat,
col=list(`Feat labels`=c("Background features" = "#47039FCC" ,"Signal features"="#FA9E3BCC")),
show_annotation_name = F)
#Creating heatmap.
h <- draw(Heatmap(do.call("cbind", sim_blocks[-4]), #Excluding the categorical response.
left_annotation = Sub.ann,
top_annotation = Feat.ann,
row_title = "Subjects",
column_title = "Features",
show_heatmap_legend = F,
cluster_columns = T,
cluster_rows = T),
annotation_legend_side = "bottom")
ggsave(h,filename = "~/lalala.jpeg",device = "jpeg",width = 6,height = 5)
#Creating heatmap.
jpeg(tempfile("Heatmap",fileext = "jpeg"),width = 600,height = 500)
draw(Heatmap(do.call("cbind", sim_blocks[-4]), #Excluding the categorical response.
left_annotation = Sub.ann,
top_annotation = Feat.ann,
row_title = "Subjects",
column_title = "Features",
show_heatmap_legend = F,
cluster_columns = T,
cluster_rows = T),
annotation_legend_side = "bottom")
draw(Heatmap(do.call("cbind", sim_blocks[-4]), #Excluding the categorical response.
left_annotation = Sub.ann,
top_annotation = Feat.ann,
row_title = "Subjects",
column_title = "Features",
show_heatmap_legend = F,
cluster_columns = T,
cluster_rows = T),
annotation_legend_side = "bottom")
dev.off()
tempfile()
help(opts_chunk)
str(knitr::opts_chunk$get()) f
str(knitr::opts_chunk$get())
devtools::check("~/../Dropbox/Ana-Agustin/Projects/OmicIntegration/MOSS files/MOSS")
devtools::check("~/../Dropbox/Ana-Agustin/Projects/OmicIntegration/MOSS files/MOSS")
library(MOSS)
install.packages("~/bblia.pdf", repos = NULL)
#Load necessary package and functions.
library(MOSS)
#Load dimensions information.
load("~/../Dropbox/Ana-Agustin/Projects/Cancer/Methylation summaries/data/meth_dimnames.rds", verbose = TRUE)
#Load first data set: CpG site-based methylation data.
load("~/../Dropbox/Ana-Agustin/Projects/Cancer/Methylation summaries/data/meth_cpg.rds", verbose = TRUE)
#Getting clusters.
set.seed(42)
out_cpg <- moss(data.blocks = list(meth_cpg),
tSNE = TRUE,
clus = TRUE,
plot=TRUE,
clus.lab=metdat(meth_dimnames$samples,1))
metdat <- function(x,i,sep = "-") unlist(lapply(strsplit(x,sep,T), function(x) paste(x[i], collapse = "-")))
metdat(meth_dimnames$samples,1)
#Getting clusters.
set.seed(42)
out_cpg <- moss(data.blocks = list(meth_cpg),
tSNE = TRUE,
clus = TRUE,
plot=TRUE,
clus.lab=metdat(meth_dimnames$samples,1))
out_cgi
out_cpg
#Getting clusters.
set.seed(42)
out_cpg <- moss(data.blocks = list(meth_cpg),K.X=50)
save(out_cpg,file="~/../Desktop/out_cpg.rda")
#Getting clusters.
set.seed(42)
out_cgi <- moss(data.blocks = list(meth_cgi),K.X = 50)
save(out_cgi,file="~/../Desktop/out_cgi.rda")
#Load second data set: CpG island-based methylation data.
load("~/../Dropbox/Ana-Agustin/Projects/Cancer/Methylation summaries/data/meth_cgi.rds", verbose = TRUE)
#Getting clusters.
set.seed(42)
out_cgi <- moss(data.blocks = list(meth_cgi),K.X = 50)
save(out_cgi,file="~/../Desktop/out_cgi.rda")
load("C:/Users/epibio/Desktop/out_cpg.rda")
out_cgi$B
library(ggalluvial)
help("ggalluvial")
titanic_wide <- data.frame(Titanic)
head(titanic_wide)
ggplot(data = titanic_wide,
aes(axis1 = Class, axis2 = Sex, axis3 = Age,
y = Freq)) +
scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.1, .05)) +
xlab("Demographic") +
geom_alluvium(aes(fill = Survived)) +
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal() +
ggtitle("passengers on the maiden voyage of the Titanic",
"stratified by demographics and survival")
load("~/../Desktop/out_cgi.rda", verbose=TRUE)
#Load methylation PC.
load("~/../Desktop/out_cpg.rda", verbose=TRUE)
library(MOSS)
dim(out_cpg$dense$u)
source('~/MOSS/R/pca2tsne.R')
#Get tSNE map for CpG sites.
out_cpg_tsne <- pca2tsne(out_cpg$dense$u,perp = 30,n.iter = 1e5)
#Get tSNE map for CpG sites.
set.seed(43)
out_cpg_tsne <- pca2tsne(out_cpg$dense$u,perp = 30,n.iter = 1e4)
plot(out_cpg_tsne$Y)
#Get tSNE map for CpG sites.
set.seed(43)
out_cpg_tsne <- pca2tsne(out_cpg$dense$u,perp = 30,n.iter = 1e5)
#Get tSNE map for CpG sites.
set.seed(43)
out_cpg_tsne <- pca2tsne(out_cpg$dense$u,perp = 30,n.iter = 1e4)
#Load methylation PCs from CPG islands.
load("~/../Desktop/out_cgi.rda", verbose=TRUE)
#Get tSNE map for CPG islands.
set.seed(43)
out_cgi_tsne <- pca2tsne(out_cgi$dense$u,perp = 30,n.iter = 1e4)
plot(out_cgi_tsne$Y)
plot(out_cpg_tsne$Y)
metdat <- function(x,i,sep = "-") unlist(lapply(strsplit(x,sep,T), function(x) paste(x[i], collapse = "-")))
#Load dimensions information.
load("~/../Dropbox/Ana-Agustin/Projects/Cancer/Methylation summaries/data/meth_dimnames.rds", verbose = TRUE)
metdat(meth_dimnames$samples,i=1)
aest.f <- function(x,n.cat=2,option="D") {
if (is.numeric(x) == T) x <- cut_interval(x, n.cat)
if (is.factor(x) == T) x <- as.character(x)
require(viridis)
d <- data.frame(pch=16, col=viridis(length(unique(x)),option = option,alpha=0.5),stringsAsFactors = F)
names <- unique(x)
tmp <- is.na(names)
d <- d[!tmp,]
rownames(d) <- names[!tmp]
return(d)
}
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
clus = TRUE)
out_cpg_clus
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 2,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
out_cpg_clus
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 1.5,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
out_cpg_clus
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = c(1,2),
eps_res = 10,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
out_cpg_clus
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cgi_clus <- tsne2clus(out_cgi_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = c(1,2),
eps_res = 10,
xlab = "x:tSNE(PC1-50) (from CPG island summaries)",
ylab = "y:tSNE(PC1-50) (from CPG island summaries)",
clus = TRUE)
out_cgi_clus
#Comparing clusters with alluvial plots.
titanic_wide <- data.frame(CPG=out_cpg_clus$clusters.plot$data$cluster,
CGI=out_cgi_clus$clusters.plot$data$cluster,
Cancer=out_cgi_clus$clusters.plot$data$label)
#Comparing clusters with alluvial plots.
out_cgi_clus$clusters.plot$data$ID
#Comparing clusters with alluvial plots.
as.numeric(out_cgi_clus$clusters.plot$data$ID)
#Comparing clusters with alluvial plots.
as.character(out_cgi_clus$clusters.plot$data$ID)
#Comparing clusters with alluvial plots.
as.numeric(as.character(out_cgi_clus$clusters.plot$data$ID))
rownames(out_cpg_tsne$Y)
rownames(out_cpg_tsne$Y) <- meth_dimnames$samples
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = c(1,2),
eps_res = 10,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
rownames(out_cgi_tsne$Y) <- meth_dimnames$samples
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cgi_clus <- tsne2clus(out_cgi_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = c(1,2),
eps_res = 10,
xlab = "x:tSNE(PC1-50) (from CPG island summaries)",
ylab = "y:tSNE(PC1-50) (from CPG island summaries)",
clus = TRUE)
#Comparing clusters with alluvial plots.
as.character(out_cgi_clus$clusters.plot$data$ID)
#Comparing clusters with alluvial plots.
tmp <- intersect(as.character(out_cpg_clus$clusters.plot$data$ID),
as.character(out_cgi_clus$clusters.plot$data$ID))
tmp
axis1 <- out_cpg_clus$clusters.plot$data$cluster[out_cpg_clus$clusters.plot$data$ID %in% tmp]
axis1
out_cpg_clus$clusters.plot$data$ID %in% tmp
sum(out_cpg_clus$clusters.plot$data$ID %in% tmp)
axis1 <- out_cpg_clus$clusters.plot$data$cluster[as.character(out_cpg_clus$clusters.plot$data$ID) %in% tmp]
sum(as.character(out_cpg_clus$clusters.plot$data$ID) %in% tmp)
axis2 <- out_cgi_clus$clusters.plot$data$cluster[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
axis3 <- out_cgi_clus$clusters.plot$data$label[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
d <- data.frame(axis1,axis2,axis3)
head(d)
axis1
d <- data.frame(axis1,axis2,axis3)
head(d)
group <- out_cgi_clus$clusters.plot$data$label[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
d <- data.frame(axis1,axis2,group)
head(d)
ggplot(data = d,
aes(axis1 = axis1, axis2 = axis2))
ggplot(data = d,
aes(axis1 = axis1, axis2 = axis2)) +
#scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.1, .05)) +
#xlab("Demographic") +
geom_alluvium(aes(fill = group)) +
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 2,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cgi_clus <- tsne2clus(out_cgi_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 2,
xlab = "x:tSNE(PC1-50) (from CPG island summaries)",
ylab = "y:tSNE(PC1-50) (from CPG island summaries)",
clus = TRUE)
#Comparing clusters with alluvial plots.
tmp <- intersect(as.character(out_cpg_clus$clusters.plot$data$ID),
as.character(out_cgi_clus$clusters.plot$data$ID))
axis1 <- out_cpg_clus$clusters.plot$data$cluster[as.character(out_cpg_clus$clusters.plot$data$ID) %in%
tmp]
axis2 <- out_cgi_clus$clusters.plot$data$cluster[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
group <- out_cgi_clus$clusters.plot$data$label[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
d <- data.frame(axis1,axis2,group)
head(d)
ggplot(data = d,
aes(axis1 = axis1, axis2 = axis2)) +
scale_x_discrete(limits = c("From CpG sites values", "From CGI summaries"), expand = c(.1, .05)) +
xlab("Clusters of  tumors") +
geom_alluvium(aes(fill = group)) +
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 2.5,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
out_cpg_clus
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cpg_clus <- tsne2clus(out_cpg_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 3,
xlab = "x:tSNE(PC1-50) (from CpG site values)",
ylab = "y:tSNE(PC1-50) (from CpG site values)",
clus = TRUE)
out_cpg_clus
#Get clusters of tumors for CpG sites.
set.seed(43)
out_cgi_clus <- tsne2clus(out_cgi_tsne,
labels = metdat(meth_dimnames$samples,i=1),
aest =aest.f(metdat(meth_dimnames$samples,i=1)),
group.names = "Cancer type",
eps_range = 3,
xlab = "x:tSNE(PC1-50) (from CPG island summaries)",
ylab = "y:tSNE(PC1-50) (from CPG island summaries)",
clus = TRUE)
#Comparing clusters with alluvial plots.
tmp <- intersect(as.character(out_cpg_clus$clusters.plot$data$ID),
as.character(out_cgi_clus$clusters.plot$data$ID))
axis1 <- out_cpg_clus$clusters.plot$data$cluster[as.character(out_cpg_clus$clusters.plot$data$ID) %in%
tmp]
axis2 <- out_cgi_clus$clusters.plot$data$cluster[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
group <- out_cgi_clus$clusters.plot$data$label[as.character(out_cgi_clus$clusters.plot$data$ID) %in%
tmp]
d <- data.frame(axis1,axis2,group)
head(d)
ggplot(data = d,
aes(axis1 = axis1, axis2 = axis2)) +
scale_x_discrete(limits = c("From CpG sites values", "From CGI summaries"), expand = c(.1, .05)) +
xlab("Clusters of  tumors") +
geom_alluvium(aes(fill = group)) +
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
vignette(topic = "ggalluvial", package = "ggalluvial")
ggplot(data = d,
aes(axis1 = axis1, axis2 = axis2)) +
scale_x_discrete(limits = c("From CpG sites values", "From CGI summaries"), expand = c(.1, .05)) +
xlab("Clusters of  tumors") +
geom_alluvium(aes(fill = group)) +coord_flip()+
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
d$axis1
tmp <- d$axis1 != "2" & d$axis2 != 1
ggplot(data = d[tmp,],
aes(axis1 = axis1, axis2 = axis2)) +
scale_x_discrete(limits = c("From CpG sites values", "From CGI summaries"), expand = c(.1, .05)) +
xlab("Clusters of  tumors") +
geom_alluvium(aes(fill = group)) +coord_flip()+
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
tmp <- d$axis1 != "1" & d$axis2 != "2"
ggplot(data = d[tmp,],
aes(axis1 = axis1, axis2 = axis2)) +
scale_x_discrete(limits = c("From CpG sites values", "From CGI summaries"), expand = c(.1, .05)) +
xlab("Clusters of  tumors") +
geom_alluvium(aes(fill = group)) +coord_flip()+
geom_stratum() + geom_text(stat = "stratum", infer.label = TRUE) +
theme_minimal()
setwd("C:/Users/epibio/Dropbox/MOSS")
library(devtools)
file.exists("~/.ssh/id_rsa.pub")
x <- "this is one chunk & this is another"
#' Extracts (and merges) characters chunks.
#'
#' @param x A character vector.
#' @param i Index specifying which one of the character chunks separated by 'sep' is to be picked.
#' @param sep Character separating chunks of characters.
#' @returns A character vector with the extracted (and merged) chunks of characters from input vector.
#' @export
#' @examples
#' x <- "this is one chunk & this is another"
metdat <- function(x,i,sep = "-") unlist(lapply(strsplit(x,sep,T), function(x) paste(x[i], collapse = "-")))
metdat(x,1,"&)
metdat(x,1,"&")
metdat(x,1," & ")
metdat(x, c(1, 2), " & ")
#' @param i Index specifying which one of the character chunks separated by 'sep' is to be picked.
#' @param sep Character separating chunks of characters. Defaults to "-".
#' @param collapse New character vector separating chunks of characters. Default to 'sep'.
#' @returns A character vector with the extracted (and merged) chunks of characters from input vector.
#' @export
#' @examples
#' x <- "this is one chunk of characters & this is another"
#' metdat(x, 1, " & ")
#' metdat(x, 2, " & ")
#' metdat(x, c(1, 2), " & ")
metdat <- function(x,i,sep = "-", collapse = sep) unlist(lapply(strsplit(x,sep,T), function(x) paste(x[i], collapse = collapse)))
metdat(x, c(1, 2), " & ")
metdat(x, c(1, 2), " & ", " and ")
setwd()
getwd()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
environment(is)
environment(inherits)
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
matrix(rnorm(10),2,5)
m <- matrix(rnorm(10),2,5)
n <- matrix(rnorm(10),2,5)
crossprod(m,n)
abs(crossprod(m,n))
sim_blocks <- simulate_data()$sim_blocks
X <- sim_blocks$`Block 3`
#Equal to svd solution: exact singular vectors and values.
out <- ssvdEN(X,approx.arg = FALSE)
s.u <- sample(1:nrow(X), 1)
s.v <- sample(1:ncol(X), 1)
#Lasso penalties.
all.equal(sum(ssvdEN(X,dg.spar.features = s.v)$v != 0),s.v)
all.equal(unique(colSums(ssvdEN(X,dg.spar.features = s.v,n.PC=5)$v != 0)), s.v)
environment(norm)
norm( m - n, "f")
norm( m - n, "f") / prod(dim(m))
devtools::document()
all.equal(sum(ssvdEN(X,dg.spar.features = s.v)$v != 0),s.v)
all.equal(unique(colSums(ssvdEN(X,dg.spar.features = s.v,n.PC=5)$v != 0)), s.v)
all.equal(sum(ssvdEN(X,dg.spar.subjects  = s.u)$u != 0),s.u)
all.equal(unique(colSums(ssvdEN(X,dg.spar.subjects = s.u,n.PC=5)$u != 0)), s.u)
out <- ssvdEN(X,dg.spar.features = s.v,dg.spar.subjects = s.u)
all.equal(sum(out$u != 0), s.u)
all.equal(sum(out$v != 0), s.v)
out <- ssvdEN(X,dg.spar.features = s.v,dg.spar.subjects = s.u,n.PC=10)
all.equal(unique(colSums(out$u != 0)), s.u)
all.equal(unique(colSums(out$v != 0)), s.v)
#Ridge penalties.
all.equal(sum(ssvdEN(X,dg.spar.features = s.v,alpha.f = 0)$v != 0),ncol(X))
all.equal(unique(colSums(ssvdEN(X,dg.spar.features = s.v, n.PC=5,alpha.f = 0)$v != 0)), ncol(X))
all.equal(sum(ssvdEN(X,dg.spar.subjects = s.u,alpha.s = 0)$u != 0),nrow(X))
all.equal(unique(colSums(ssvdEN(X,dg.spar.subjects = s.u, n.PC=5,alpha.s = 0)$u != 0)), nrow(X))
out <- ssvdEN(X,dg.spar.features = s.v,dg.spar.subjects = s.u,alpha.f = 0,alpha.s = 0)
all.equal(sum(out$u != 0), nrow(X))
all.equal(sum(out$v != 0), ncol(X))
out <- ssvdEN(X,dg.spar.features = s.v,dg.spar.subjects = s.u,n.PC=10,alpha.f = 0,alpha.s = 0)
all.equal(unique(colSums(out$u != 0)), nrow(X))
all.equal(unique(colSums(out$v != 0)), ncol(X))
#Elastic Net penalties.
sum(ssvdEN(X,dg.spar.features = s.v,alpha.f = 0.5)$v != 0.5) >= s.v
all(unique(colSums(ssvdEN(X,dg.spar.features = s.v, n.PC=5,alpha.f = 0.5)$v != 0)) >= s.v)
sum(ssvdEN(X,dg.spar.subjects = s.u,alpha.s = 0.5)$v != 0) >= s.u
all(unique(colSums(ssvdEN(X,dg.spar.subjects = s.u, n.PC=5,alpha.s = 0.5)$u != 0)) >= s.u)
#Example of usage within moss.
out <- moss(sim_blocks[-4],
K.X=1,
dg.grid.right = 22,
dg.grid.left = 11,
alpha.right = 1,
alpha.left = 1)
colSums(out$sparse$u!=0)
colSums(out$sparse$v!=0)
devtools::check()
