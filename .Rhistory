library(devtools)
library(CMplot)
install.packages("CMplot")
library(CMplot)
setwd("C:/Users/epibio/Desktop")
CMplot(pig60K,plot.type="d",bin.size=1e6,col=c("darkgreen", "yellow", "red"),file="jpg",memo="",dpi=300)
data("pig60K")
CMplot(pig60K,plot.type="d",bin.size=1e6,col=c("darkgreen", "yellow", "red"),file="jpg",memo="",dpi=300)
head(pig60K)
ls(list=ls())
rm(list=ls())
remove.packages("MOSS")
devtools::install_github("agugonrey/MOSS")
library(MOSS)
set.seed(42)
X <- matrix(rnorm(1000),100,10)
y <- X[,1:5] %*% rep(50,5) + rnorm(100,sd=0.05)
b.prod <- crossprod(solve(crossprod(X)), crossprod(X,y))
b.moss <- moss(data.blocks = list(y,X),scale. = F,
resp.block = 1,
method = 'rrr',
K.X=10,
K.Y = 1)$B
expect_equal(b.prod , b.moss)
library(testthat)
expect_equal(b.prod , b.moss)
b.prod
b.moss
all(b.prod == b.moss)
all.equal(b.prod == b.moss)
all.equal(b.prod , b.moss)
set.seed(42)
X <- matrix(rnorm(1000),10,100)
y <- X[,1:5] %*% rep(50,5) + rnorm(10,sd=0.05)
b.prod <- crossprod(MASS::ginv(crossprod(X)), crossprod(X,y))
b.moss <- moss(data.blocks = list(y,X),scale. = F,
resp.block = 1,
method = 'rrr',
K.X=10,
K.Y = 1)$B
expect_equal(b.prod , b.moss)
all.equal(b.prod , b.moss)
sim_data <- simulate_data()
sim_blocks <- sim_data$sim_blocks
X <- as.matrix(sim_blocks$`Block 1`[,1:20])
y <- sim_blocks$`Block 3`[,1:5]
b.prod <- crossprod(solve(crossprod(X)), crossprod(X,y))
b.moss <- moss(data.blocks = list(y,X),scale. = F,
resp.block = 1,
method = 'rrr',
K.X=min(dim(X)),
K.Y = min(dim(X), dim(y)))$B
expect_equal(b.prod , b.moss)
all.equal(b.prod , b.moss)
set.seed(42)
sim_data <- simulate_data()
sim_blocks <- sim_data$sim_blocks
X <- sim_blocks$`Block 3`
#Sampling a number of subjects and features for a fix sparsity degree.
s.u <- sample(1:nrow(X), 1)
s.v <- sample(1:ncol(X), 1)
expect_equal(5,6)
#Lasso penalties.
expect_equal(sum(ssvdEN(X,dg.spar.features = s.v)$v != 0),s.v)
expect_equal(sum(ssvdEN(X,dg.spar.subjects  = s.u)$u != 0),s.u)
set.seed(42)
sim_data <- simulate_data()
sim_blocks <- sim_data$sim_blocks
X <- sim_blocks$`Block 3`
#Sampling a number of subjects and features for a fix sparsity degree.
s.u <- sample(1:nrow(X), 1)
s.v <- sample(1:ncol(X), 1)
#Lasso penalties.
expect_equal(sum(ssvdEN(X,dg.spar.features = s.v,alpha.f  = 0)$v != 0),ncol(X))
expect_equal(sum(ssvdEN(X,dg.spar.subjects  = s.u,alpha.s = 0)$u != 0),nrow(X))
set.seed(42)
sim_data <- simulate_data()
sim_blocks <- sim_data$sim_blocks
X <- sim_blocks$`Block 3`
#Sampling a number of subjects and features for a fix sparsity degree.
s.u <- sample(1:nrow(X), 1)
s.v <- sample(1:ncol(X), 1)
#Lasso penalties.
expect_gte(sum(ssvdEN(X,dg.spar.features = s.v,alpha.f = 0.5)$v != 0),s.v)
expect_gte(sum(ssvdEN(X,dg.spar.subjects  = s.u,alpha.s = 0.5)$u != 0),s.u)
sim_data <- simulate_data()
sim_blocks <- sim_data$sim_blocks
X <- as.matrix(sim_blocks$`Block 1`[,1:20])
y <- sim_blocks$`Block 3`[,1:5]
b.prod <- crossprod(solve(crossprod(X)), crossprod(X,y))
b.moss <- moss(data.blocks = list(y,X),scale. = F,
resp.block = 1,
method = 'rrr',
K.X=min(dim(X)),
K.Y = min(dim(X), dim(y)))$B
solve(crossprod(X))
devtools::document()
getwd()
devtools::document("MOSS/")
devtools::document("MOSS")
install.packages("clValid")
